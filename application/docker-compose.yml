version: "3.11"

networks:
  app:
    driver: bridge

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:
  piper_models:

services:
  postgres:
    image: postgres:16
    container_name: linguatext_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: linguatext_backend
    depends_on:
      postgres:
        condition: service_healthy
      stt:
        condition: service_started
      tts-piper:
        condition: service_started
      tts-uz:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: ${PORT:-4000}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      CHOKIDAR_USEPOLLING: "true"
      # Prefer local service, fallback is ngrok if provided
      STT_SERVICE_URL: ${STT_SERVICE_URL:-http://nginx:80/stt-api/}
      PIPER_TTS_URL: http://tts-piper:8080/api/tts
      COQUI_TTS_URL: http://tts-uz:5002/api/tts
    command: sh -c "npm run db:migrate && npm run db:seed && npm run dev"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    ports:
      - "${PORT:-4000}:4000"
    networks:
      - app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: linguatext_frontend
    env_file:
      - .env
    environment:
      VITE_DEV_SERVER_HOST: 0.0.0.0
      CHOKIDAR_USEPOLLING: "true"
    command: sh -c "npm ci || npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    networks:
      - app

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: linguatext_nginx
    depends_on:
      - frontend
      - backend
    ports:
      - "8080:80"
    networks:
      - app

  ngrok:
    image: ngrok/ngrok:latest
    container_name: linguatext_ngrok
    depends_on:
      - frontend
    env_file:
      - .env
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: http --domain=${NGROK_DOMAIN:-wombat-accepted-whale.ngrok-free.app} http://frontend:5173
    ports:
      - "4040:4040" # ngrok web UI
    networks:
      - app

  stt:
    image: ghcr.io/plaggy/asrdiarization-server:latest
    container_name: linguatext_stt
    environment:
      ASR_MODEL: ${ASR_MODEL:-openai/whisper-small}
    ports:
      - "7860:7860"
    networks:
      - app

  tts-piper:
    image: ghcr.io/arunk140/serve-piper-tts:latest
    container_name: linguatext_tts_piper
    volumes:
      - piper_models:/app/models
    environment:
      # optional env for the wrapper if any are supported in image
      TZ: Etc/UTC
    ports:
      - "8081:8080"
    networks:
      - app

  tts-uz:
    image: ghcr.io/coqui-ai/tts-cpu:latest
    container_name: linguatext_tts_uz
    entrypoint: ["/bin/sh", "-lc"]
    command: python3 -m TTS.server.server --model_name tts_models/multilingual/multi-dataset/xtts_v2
    ports:
      - "5002:5002"
    environment:
      COQUI_TOS_AGREED: "1"
    networks:
      - app
